#pragma once
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Consts declarations
#include <float.h>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// square root of the 2 and 3
#define SQRT_2		1.41421356237309504880
#define SQRT_3		1.73205080756887729353
#define FP_SQRT_2	1.41421356f
#define FP_SQRT_3	1.73205081f

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// different constants with 'pi'
#define PI					3.14159265358979323846
#define FP_PI				3.14159265f
#define FP_2PI			6.28318531f
#define FP_4PI			12.56637061f
#define FP_8PI			25.13274123f
#define FP_PI2			1.57079633f
#define FP_PI4			0.78539816f
#define FP_PI8			0.39269908f
#define FP_INV_PI		0.31830989f

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Epsilon 
#define FP_EPSILON	1e-4f
#define FP_EPSILON2	1e-8f

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Working with Not A Numbers
#define NAN_MASK (255<<23)

// Only for float and for better performance in debug checks
#define MAKE_NAN( f ) { *(int *)(&f) = NAN_MASK; }
#define IS_NAN( x ) ( ((*(int *)&x) & NAN_MASK) == NAN_MASK )
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
union f2i
{
float f;
int i;
};
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
inline bool IsNan( float x )
{
	f2i c;
	c.f = x;
	return IS_NAN( c.i );
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
inline bool IsNan( double x )
{
	return isnan( x ) != 0;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
